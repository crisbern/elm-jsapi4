{"version":3,"sources":["../src/animate.js"],"names":["animate","inSine","options","duration","ease","easing","a","onProgress","onComplete","from","to","startTime","Date","now","update","deltaTime","progress","Math","min","factor","values","property","hasOwnProperty","requestAnimationFrame","t","cos","PI"],"mappings":";;;;;;UACgBA,O,GAAAA,O;UAuCAC,M,GAAAA,M;AAxChB;AACO,WAASD,OAAT,CAAiBE,OAAjB,EAA0B;AAC/BA,cAAUA,WAAW,EAArB;;AAEA;AACA,QAAMC,WAAWD,QAAQC,QAAR,IAAoB,GAArC;AAAA,QACEC,OAAOF,QAAQG,MAAR,IAAkB,UAAUC,CAAV,EAAa;AAAE,aAAOA,CAAP;AAAU,KADpD;AAAA,QACsD;AACpDC,iBAAaL,QAAQK,UAAR,IAAsB,YAAY,CAAG,CAFpD;AAAA,QAGEC,aAAaN,QAAQM,UAAR,IAAsB,YAAY,CAAG,CAHpD;AAAA,QAIEC,OAAOP,QAAQO,IAAR,IAAgB,EAJzB;AAAA,QAKEC,KAAKR,QAAQQ,EAAR,IAAc,EALrB;;AAOA;AACA,QAAMC,YAAYC,KAAKC,GAAL,EAAlB;;AAEA,aAASC,MAAT,GAAkB;AAChB,UAAIC,YAAYH,KAAKC,GAAL,KAAaF,SAA7B;AAAA,UACEK,WAAWC,KAAKC,GAAL,CAASH,YAAYZ,QAArB,EAA+B,CAA/B,CADb;AAAA,UAEEgB,SAASf,KAAKY,QAAL,CAFX;AAAA,UAGEI,SAAS,EAHX;AAAA,UAIEC,iBAJF;;AAMA,WAAKA,QAAL,IAAiBZ,IAAjB,EAAuB;AACrB,YAAIA,KAAKa,cAAL,CAAoBD,QAApB,KAAiCX,GAAGY,cAAH,CAAkBD,QAAlB,CAArC,EAAkE;AAChED,iBAAOC,QAAP,IAAmBZ,KAAKY,QAAL,IAAiB,CAACX,GAAGW,QAAH,IAAeZ,KAAKY,QAAL,CAAhB,IAAkCF,MAAtE;AACD;AACF;;AAEDZ,iBAAWa,MAAX;;AAEA,UAAIJ,aAAa,CAAjB,EAAoB;AAClBR,mBAAWO,SAAX;AACD,OAFD,MAEO;AACLQ,8BAAsBT,MAAtB;AACD;AACF;;AAEDS,0BAAsBT,MAAtB;AACD;;AAEM,WAASb,MAAT,CAAgBuB,CAAhB,EAAmB;AACxB,WAAO,CAACP,KAAKQ,GAAL,CAASD,IAAIP,KAAKS,EAAT,GAAc,CAAvB,CAAD,GAA6B,CAApC;AACD","file":"animate.js","sourcesContent":["// http://codereview.stackexchange.com/questions/106946/simple-animation-method-with-requestanimationframe-code-structure\nexport function animate(options) {\n  options = options || {};\n\n  // defaults\n  const duration = options.duration || 500,\n    ease = options.easing || function (a) { return a }, // basic linear easing\n    onProgress = options.onProgress || function () { },\n    onComplete = options.onComplete || function () { },\n    from = options.from || {},\n    to = options.to || {};\n\n  // runtime variables\n  const startTime = Date.now();\n\n  function update() {\n    let deltaTime = Date.now() - startTime,\n      progress = Math.min(deltaTime / duration, 1),\n      factor = ease(progress),\n      values = {},\n      property;\n\n    for (property in from) {\n      if (from.hasOwnProperty(property) && to.hasOwnProperty(property)) {\n        values[property] = from[property] + (to[property] - from[property]) * factor;\n      }\n    }\n\n    onProgress(values);\n\n    if (progress === 1) {\n      onComplete(deltaTime);\n    } else {\n      requestAnimationFrame(update);\n    }\n  }\n\n  requestAnimationFrame(update);\n}\n\nexport function inSine(t) {\n  return -Math.cos(t * Math.PI / 2) + 1;\n}\n"]}